Here's an example of Java NIO communication code, covering all the major components:

1. **SocketChannel** for TCP communication.
2. **DatagramChannel** for UDP communication.
3. **FileChannel** for file operations.
4. **Selector** to monitor multiple channels for non-blocking I/O operations.
5. **ByteBuffer** and other types of buffers for efficient data storage.

### 1. **TCP Communication (SocketChannel with Selector)**

This example demonstrates using a `SocketChannel` for TCP communication. It uses a `Selector` to handle multiple channels and non-blocking I/O. We also use a `ByteBuffer` to manage the data.

```java
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.Set;

public class NioTcpSocketChannelExample {
    public static void main(String[] args) throws IOException {
        // Open a Selector
        Selector selector = Selector.open();

        // Open a SocketChannel and configure it to non-blocking mode
        SocketChannel socketChannel = SocketChannel.open();
        socketChannel.configureBlocking(false);
        socketChannel.connect(new InetSocketAddress("localhost", 8080));

        // Register the channel with the selector for connection operation
        socketChannel.register(selector, SelectionKey.OP_CONNECT);

        while (true) {
            // Select the channels that are ready for I/O operations
            selector.select();

            // Get the selection keys and iterate through them
            Set<SelectionKey> selectedKeys = selector.selectedKeys();
            Iterator<SelectionKey> iter = selectedKeys.iterator();

            while (iter.hasNext()) {
                SelectionKey key = iter.next();
                iter.remove();

                if (key.isConnectable()) {
                    // Complete connection
                    SocketChannel channel = (SocketChannel) key.channel();
                    if (channel.isConnectionPending()) {
                        channel.finishConnect();
                    }
                    channel.register(selector, SelectionKey.OP_READ);

                    // Send data to server
                    ByteBuffer buffer = ByteBuffer.allocate(256);
                    buffer.put("Hello Server!".getBytes());
                    buffer.flip();
                    channel.write(buffer);
                } else if (key.isReadable()) {
                    // Read data from server
                    SocketChannel channel = (SocketChannel) key.channel();
                    ByteBuffer buffer = ByteBuffer.allocate(256);
                    channel.read(buffer);
                    String response = new String(buffer.array()).trim();
                    System.out.println("Server Response: " + response);
                }
            }
        }
    }
}
```

### 2. **UDP Communication (DatagramChannel)**

This example demonstrates how to use `DatagramChannel` for UDP communication. A `ByteBuffer` is used to read/write data to the channel.

```java
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;

public class NioUdpDatagramChannelExample {
    public static void main(String[] args) throws Exception {
        DatagramChannel datagramChannel = DatagramChannel.open();

        // Bind the DatagramChannel to a local port
        datagramChannel.bind(new InetSocketAddress(9999));

        ByteBuffer buffer = ByteBuffer.allocate(256);
        buffer.clear();
        buffer.put("Hello via UDP".getBytes());
        buffer.flip();

        // Send a packet
        datagramChannel.send(buffer, new InetSocketAddress("localhost", 8080));

        // Receive a packet
        buffer.clear();
        datagramChannel.receive(buffer);
        buffer.flip();
        System.out.println("Received: " + new String(buffer.array(), 0, buffer.limit()));
    }
}
```

### 3. **File I/O (FileChannel)**

In this example, a `FileChannel` is used to read and write to a file. The `ByteBuffer` handles file data, while the `Files` and `Path` classes are used to manage file operations.

```java
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;

public class NioFileChannelExample {
    public static void main(String[] args) throws IOException {
        Path path = Paths.get("example.txt");

        // Write data to a file using FileChannel
        try (FileChannel fileChannel = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE)) {
            ByteBuffer buffer = ByteBuffer.allocate(64);
            buffer.put("Writing to file using FileChannel".getBytes());
            buffer.flip();
            fileChannel.write(buffer);
        }

        // Read data from the file using FileChannel
        try (FileChannel fileChannel = FileChannel.open(path, StandardOpenOption.READ)) {
            ByteBuffer buffer = ByteBuffer.allocate(64);
            fileChannel.read(buffer);
            buffer.flip();
            System.out.println("Read from file: " + new String(buffer.array(), 0, buffer.limit()));
        }
    }
}
```

### 4. **Selectors with Multiple Channels**

This demonstrates a `Selector` monitoring multiple `SocketChannel` instances, with each channel performing different operations.

```java
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.Set;

public class NioMultipleSocketChannelsWithSelector {
    public static void main(String[] args) throws IOException {
        Selector selector = Selector.open();

        // Open and configure first SocketChannel
        SocketChannel socketChannel1 = SocketChannel.open();
        socketChannel1.configureBlocking(false);
        socketChannel1.connect(new InetSocketAddress("localhost", 8081));
        socketChannel1.register(selector, SelectionKey.OP_CONNECT);

        // Open and configure second SocketChannel
        SocketChannel socketChannel2 = SocketChannel.open();
        socketChannel2.configureBlocking(false);
        socketChannel2.connect(new InetSocketAddress("localhost", 8082));
        socketChannel2.register(selector, SelectionKey.OP_CONNECT);

        while (true) {
            selector.select();

            Set<SelectionKey> selectedKeys = selector.selectedKeys();
            Iterator<SelectionKey> iter = selectedKeys.iterator();

            while (iter.hasNext()) {
                SelectionKey key = iter.next();
                iter.remove();

                if (key.isConnectable()) {
                    SocketChannel channel = (SocketChannel) key.channel();
                    if (channel.isConnectionPending()) {
                        channel.finishConnect();
                    }
                    channel.register(selector, SelectionKey.OP_READ);

                    // Send a message to server
                    ByteBuffer buffer = ByteBuffer.allocate(256);
                    buffer.put("Hello Server!".getBytes());
                    buffer.flip();
                    channel.write(buffer);
                } else if (key.isReadable()) {
                    SocketChannel channel = (SocketChannel) key.channel();
                    ByteBuffer buffer = ByteBuffer.allocate(256);
                    channel.read(buffer);
                    System.out.println("Received from Server: " + new String(buffer.array()).trim());
                }
            }
        }
    }
}
```

### Key NIO Components Overview:

1. **SocketChannel**: Used for non-blocking TCP connections. It handles reading/writing to a TCP connection.
2. **DatagramChannel**: Supports non-blocking UDP communication. It sends/receives datagrams.
3. **FileChannel**: Handles non-blocking file I/O operations.
4. **Selector**: Manages multiple channels, monitoring for readiness (read/write/connect).
5. **ByteBuffer**: Buffers data for communication, offering methods for writing and reading data efficiently.

These examples show how each NIO component works in different contexts, highlighting key aspects such as non-blocking I/O, channels, selectors, and buffers.