When working with I/O in Java, the classes `Scanner`, `FileInputStream`, `FileReader`, and `InputStream` are often used to read data from various sources, but they differ in functionality, input/output handling, and typical use cases. Let’s examine each class in depth, focusing on their inputs, outputs, and use cases, followed by an explanation of how they can complement one another.

---

### 1. **`Scanner`**

#### Overview:
`Scanner` is a utility class designed to parse primitive types (like `int`, `float`, `double`) and strings using regular expressions. It is very flexible for reading input from different sources like files, user input from the console, or strings.

#### Input:
- Can take input from various sources, such as:
  - **Files** (`File` object)
  - **Streams** (`InputStream`)
  - **Strings**
  - **User input** (via `System.in`)

#### Output:
- Reads data in primitive types or `String`, depending on the method you call (e.g., `nextInt()`, `nextDouble()`, `nextLine()`, etc.).
- It also supports token-based reading, splitting input by delimiters (like space, newline, or custom delimiters).

#### Key Methods:
- `next()`: Reads the next token as a `String`.
- `nextInt()`, `nextDouble()`, `nextFloat()`: Reads tokens as primitive types.
- `nextLine()`: Reads an entire line as a `String`.
- `useDelimiter()`: Changes the delimiter used to split input (default is whitespace).

#### Example:
```java
import java.io.File;
import java.util.Scanner;

public class ScannerExample {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(new File("input.txt"));
        while (scanner.hasNext()) {
            System.out.println(scanner.nextLine());
        }
        scanner.close();
    }
}
```

#### When to Use:
- Use when you need to **parse structured data** from user input or files.
- Ideal for **token-based reading** of input (like reading CSV files or user input via the console).
- Best when you need to read data in primitive types or need to easily split input based on delimiters.

---

### 2. **`FileReader`**

#### Overview:
`FileReader` is a character-based stream that reads text files. It extends `InputStreamReader`, which in turn uses `FileInputStream` internally to read bytes and convert them to characters based on the default character encoding (or a specified one).

#### Input:
- Takes a **file** as input (via a `File` object or a file path).

#### Output:
- Returns **characters** from the file. It reads the file character by character and is best suited for reading plain text files.

#### Key Methods:
- `read()`: Reads a single character or an array of characters.
- `close()`: Closes the file after reading is complete.

#### Example:
```java
import java.io.FileReader;

public class FileReaderExample {
    public static void main(String[] args) throws Exception {
        FileReader fr = new FileReader("input.txt");
        int i;
        while ((i = fr.read()) != -1) {
            System.out.print((char) i);  // Reading character by character
        }
        fr.close();
    }
}
```

#### When to Use:
- Use for **reading plain text files**, where you need to read characters rather than bytes.
- **FileReader** is ideal when dealing with files where encoding is important, such as UTF-8 or other character encodings.
- Best for **simple text file processing** where you don't need parsing features like in `Scanner`.

---

### 3. **`FileInputStream`**

#### Overview:
`FileInputStream` is a byte stream class used to read raw bytes from files. It is part of Java’s `InputStream` class hierarchy, which focuses on byte-oriented data rather than characters.

#### Input:
- Takes a **file** as input, similar to `FileReader`, but reads the file as raw bytes.

#### Output:
- Returns **raw bytes** from the file. It’s typically used for reading binary files like images, videos, or serialized objects.

#### Key Methods:
- `read()`: Reads a single byte or an array of bytes.
- `read(byte[] b)`: Reads up to `b.length` bytes into a byte array.
- `close()`: Closes the file after reading.

#### Example:
```java
import java.io.FileInputStream;

public class FileInputStreamExample {
    public static void main(String[] args) throws Exception {
        FileInputStream fis = new FileInputStream("input.txt");
        int i;
        while ((i = fis.read()) != -1) {
            System.out.print((char) i);  // Converts byte to char for display
        }
        fis.close();
    }
}
```

#### When to Use:
- Use for **reading binary files** (e.g., images, videos, serialized objects).
- Ideal for situations where you need to handle **raw data**, such as file transfer, binary file parsing, or byte-level data processing.
- If you need to read text data, **FileReader** is preferred, but **FileInputStream** can still be used with an `InputStreamReader` for character conversion.

---

### 4. **`InputStream`**

#### Overview:
`InputStream` is the abstract superclass for all byte-based input streams in Java, such as `FileInputStream`, `BufferedInputStream`, and `ByteArrayInputStream`. It defines methods for reading byte data from various sources.

#### Input:
- Can take a variety of sources for input, including:
  - **Files** (`FileInputStream`)
  - **Byte arrays** (`ByteArrayInputStream`)
  - **Network streams** (e.g., sockets, HTTP connections)

#### Output:
- Returns **raw bytes** from the input source, which can be converted to other types (e.g., characters, objects) based on the application.

#### Key Methods:
- `read()`: Reads a single byte or an array of bytes.
- `close()`: Closes the input stream after reading.

#### Example:
```java
import java.io.InputStream;
import java.io.FileInputStream;

public class InputStreamExample {
    public static void main(String[] args) throws Exception {
        InputStream is = new FileInputStream("input.txt");
        int i;
        while ((i = is.read()) != -1) {
            System.out.print((char) i);  // Convert byte to character
        }
        is.close();
    }
}
```

#### When to Use:
- **InputStream** is typically used as a **generalized stream abstraction** when you don’t care about the specific type of input source (e.g., reading from a file, byte array, or network socket).
- Best for **byte-oriented input**, like when reading binary data or handling network I/O.

---

### **Comparison and Use Cases:**

| Feature            | `Scanner`                               | `FileReader`                           | `FileInputStream`                       | `InputStream`                       |
|--------------------|-----------------------------------------|----------------------------------------|-----------------------------------------|-------------------------------------|
| **Type of Data**    | Structured input (tokens, primitives)   | Character-based input (text files)     | Byte-based input (binary or text files) | Byte-based input (abstract source)  |
| **Input Source**    | Files, streams, user input, strings     | Text files                             | Binary files, raw data                  | Any byte-oriented data source       |
| **Output Type**     | Strings, primitives (int, float, etc.)  | Characters                             | Bytes (can be converted to characters)  | Bytes                               |
| **Use Case**        | Reading and parsing structured input    | Reading plain text files               | Reading binary data, byte streams       | General byte-based input            |
| **Null Values**     | Not allowed                            | Not allowed                            | Not allowed                            | Not allowed                         |
| **Thread-safe**     | No                                     | No                                     | No                                     | No                                  |

---

### **Which Complements Which:**

- **`FileInputStream` + `InputStreamReader`**: If you need to read a binary file and convert it to characters, you can wrap `FileInputStream` in an `InputStreamReader`, which will handle the byte-to-character conversion.
- **`FileInputStream` + `BufferedInputStream`**: Use `BufferedInputStream` to buffer byte input from `FileInputStream`, improving performance by reducing the number of I/O operations.
- **`FileReader` + `BufferedReader`**: If you're reading large text files, you can wrap `FileReader` in `BufferedReader` to read lines of text efficiently.
- **`Scanner` + `FileReader` or `FileInputStream`**: `Scanner` can be used on top of both `FileReader` and `FileInputStream` to parse data from files or streams more easily.

### Summary:
- Use `Scanner` for parsing user input or tokenized data.
- Use `FileReader` for reading character-based text files.
- Use `FileInputStream` for reading raw byte data or binary files.
- Use `InputStream` when you need a generic byte-based input, particularly for handling different sources like files or network connections.